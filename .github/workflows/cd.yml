name: CD

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Establecer conexión SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Añadir EC2 a known_hosts
        run: ssh-keyscan -H 18.191.22.254 >> ~/.ssh/known_hosts

      - name: Limpiar espacio en EC2  
        run: |
          echo "Limpiando espacio en EC2..."
          ssh ec2-user@18.191.22.254 << EOF
            echo "Espacio antes de limpiar:"
            df -h /
            
            # Limpiar Docker
            docker system prune -af || echo "No se pudo limpiar Docker"
            docker volume prune -f || echo "No se pudo limpiar volúmenes"
            docker image prune -af || echo "No se pudo limpiar imágenes"
            
            # Limpiar archivos temporales
            sudo yum clean all || echo "No se pudo limpiar yum"
            sudo rm -rf /tmp/* || echo "No se pudo limpiar tmp"
            
            echo "Espacio después de limpiar:"
            df -h /
          EOF

      - name: Copiar archivos a la EC2 con rsync
        run: |
          echo "Iniciando transferencia de archivos a EC2..."
          rsync -avz --exclude '.git' ./ ec2-user@18.191.22.254:/home/ec2-user/deploy || {
            echo "Error al copiar archivos con rsync"
            exit 1
          }

      - name: Verificar SonarQube
        run: |
          echo "Verificando estado de SonarQube..."
          ssh ec2-user@18.191.22.254 << EOF
            if sudo -u sonar /opt/sonarqube/bin/linux-x86-64/sonar.sh status 2>/dev/null | grep -q "SonarQube is running"; then
              echo "SonarQube ya está corriendo, omitiendo instalación"
              exit 0
            else
              echo "SonarQube no está corriendo, procediendo con instalación"
            fi
          EOF

      - name: Instalar SonarQube en EC2
        run: |
          echo "Instalando SonarQube en EC2..."

          ssh ec2-user@18.191.22.254 << EOF
            set -euo pipefail

            # Instalar Java 17
            echo "Instalando Java 17..."
            sudo yum update -y
            sudo yum install -y java-17-amazon-corretto-headless

            # Crear usuario sonar
            sudo useradd sonar || echo "Usuario ya existe"

            # Descargar SonarQube
            cd /home/ec2-user
            wget -q https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-10.3.0.82913.zip || echo "Ya descargado"
            unzip -qo sonarqube-10.3.0.82913.zip || echo "Ya descomprimido"
            sudo mv sonarqube-10.3.0.82913 /opt/sonarqube || echo "Ya movido"
            sudo chown -R sonar:sonar /opt/sonarqube

            # Configurar para usar PostgreSQL
            echo "sonar.jdbc.username=postgres" | sudo tee /opt/sonarqube/conf/sonar.properties > /dev/null
            echo "sonar.jdbc.password=${POSTGRES_PASSWORD}" | sudo tee -a /opt/sonarqube/conf/sonar.properties > /dev/null
            echo "sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonar" | sudo tee -a /opt/sonarqube/conf/sonar.properties > /dev/null
            echo "sonar.web.host=0.0.0.0" | sudo tee -a /opt/sonarqube/conf/sonar.properties > /dev/null
            echo "sonar.web.port=9000" | sudo tee -a /opt/sonarqube/conf/sonar.properties > /dev/null

            # Crear BD sonar en PostgreSQL
            PGPASSWORD=${POSTGRES_PASSWORD} psql -h localhost -U postgres -d kgpc -c "CREATE DATABASE sonar;" 2>/dev/null || echo "BD ya existe"

            # Iniciar SonarQube
            sudo -u sonar /opt/sonarqube/bin/linux-x86-64/sonar.sh start || echo "Ya iniciado"

            echo "SonarQube listo en http://localhost:9000"
          EOF

      - name: Desplegar aplicación en EC2 vía Docker Compose
        run: |
          echo "Ejecutando despliegue de aplicación..."

          ssh ec2-user@18.191.22.254 << EOF
            set -euo pipefail

            cd /home/ec2-user/deploy

            echo "Desplegando aplicación..."
            export DOCKER_BUILDKIT=1
            docker-compose build --no-cache || {
              echo 'Falló build'
              exit 1
            }
            docker-compose up -d || {
              echo 'Falló startup'
              exit 1
            }

            echo "Verificando contenedores..."
            docker ps
            echo "Logs del backend:"
            docker logs backend | tail -20
            echo "Logs del frontend:"
            docker logs frontend | tail -10

            echo "Aplicación desplegada"
          EOF
