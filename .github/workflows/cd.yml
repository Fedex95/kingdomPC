name: CD

on:
  push:
    branches:
      - deploy

jobs:
  cleanup: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Establecer conexión SSH
        uses: shimataro/ssh-key-action@v2  
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: unnecessary

      - name: Añadir EC2 a known_hosts  
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 22 -H 3.149.0.158 >> ~/.ssh/known_hosts

      - name: Limpiar espacio en EC2
        run: |
          echo "Limpiando espacio en EC2..."
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ec2-user@3.149.0.158 << EOF
            echo "Espacio antes de limpiar:"
            df -h /
            
            # Copiar docker-compose.yml para down
            mkdir -p /home/ec2-user/deploy
            scp -o StrictHostKeyChecking=no docker-compose.yml ec2-user@3.149.0.158:/home/ec2-user/deploy/ || echo "Ya copiado"
            
            cd /home/ec2-user/deploy
            
            # Parar contenedores antiguos
            docker-compose down || echo "No había contenedores antiguos"
            
            # Parar todos los contenedores corriendo
            docker stop $(docker ps -q) 2>/dev/null || echo "No había contenedores corriendo"
            
            # Limpiar Docker completamente
            docker system prune -a --volumes -f || echo "No se pudo limpiar"
            
            # Limpiar archivos temporales
            sudo yum clean all || echo "No se pudo limpiar yum"
            sudo rm -rf /tmp/* || echo "No se pudo limpiar tmp"
            
            echo "Espacio después de limpiar:"
            df -h /
            docker system df
          EOF
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }} 

  deploy:  
    runs-on: ubuntu-latest
    needs: cleanup 

    steps:
      - name: Establecer conexión SSH
        uses: shimataro/ssh-key-action@v2  
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: unnecessary

      - name: Añadir EC2 a known_hosts  
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 22 -H 3.149.0.158 >> ~/.ssh/known_hosts

      - name: Copiar archivos a la EC2 con rsync
        run: |
          echo "Iniciando transferencia de archivos a EC2..."
          rsync -avz --exclude '.git' ./ ec2-user@3.149.0.158:/home/ec2-user/deploy || {
            echo "Error al copiar archivos con rsync"
            exit 1
          }

      - name: Desplegar aplicación en EC2 vía Docker Compose
        run: |
          echo "Ejecutando despliegue de aplicación:"

          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ec2-user@3.149.0.158 << EOF
            set -euo pipefail

            cd /home/ec2-user/deploy

            echo "Desplegando aplicación..."
            export DOCKER_BUILDKIT=1
            export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" 
            
            # REBUILD LIMPIO
            docker-compose build --no-cache
            
            docker-compose up -d || {
              echo 'Falló startup'
              exit 1
            }

            echo "Verificando contenedores"
            docker ps
            echo "Logs del backend:"
            docker logs backend | tail -20
            echo "Logs del frontend:"
            docker logs frontend | tail -10

            echo "Aplicación desplegada"
          EOF
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
